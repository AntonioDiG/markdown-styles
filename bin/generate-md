#!/usr/bin/env node
var fs = require('fs'),
    path = require('path'),
    subarg = require('subarg'),
    API = require('../lib/index.js');

var argv = subarg(process.argv.slice(2));
console.log(argv);

// defaults

var config = {
  input: path.resolve(process.cwd(), argv.input || './input/'),
  output: path.resolve(process.cwd(), argv.output || './output/')
};

if (!argv.layout) {
  argv.layout = 'jasonm23-markdown';
}

// Load the layout
var layoutDir = __dirname + '/../layouts/';

// template is one of:
if (fs.existsSync(process.cwd() + '/' + argv.layout)) {
  // 1) the supplied argument (normalized)
  config.template = path.normalize(process.cwd() + '/' + argv.layout);
} else if(fs.existsSync(layoutDir + argv.layout +'/page.html')) {
  // 2) a preset layout from the layout dir
  config.template = path.normalize(layoutDir + argv.layout + '/page.html');
} else {
  // 3) the default layout
  config.template = path.normalize(layoutDir + 'plain/page.html');
}

if (argv.layouts) {
  // show layouts
  console.log('Available layouts:\n'+
      fs.readdirSync(__dirname+'/../layouts/')
        .sort(function(a, b) { return a.localeCompare(b); })
        .map(function(name) { return '\t' + name})
        .join('\n')
    );
  process.exit();
}

if (argv['command']) {
  config['command'] = argv['command'].split(' ');
}

if (argv['asset-dir']) {
  config['asset-dir'] = path.resolve(process.cwd() + '/' + argv['asset-dir']);
}

var gen = new API();
gen.set(config);
gen.run();

/*


opts.options({
    'runner': { },
    'command': { },
    'asset-dir': { },
    'highlight': { }
  })
  .boolean('layouts');

var argv = opts.parse(process.argv);

argv.defaultMeta = { title: 'example' };

// default runner
if(argv.runner) {
  argv.runner = path.resolve(process.cwd(), argv.runner);
  runner = require(argv.runner);
}




function findModule(name) {
  var result = '';
  try {
    result = nodeResolve.sync(name, { basedir: process.cwd() });
  } catch(e) {
    try {
      result = nodeResolve.sync(name, { basedir: __dirname });
    } catch(e) {
      console.error('Cannot find module ' + name + ' from ' + process.cwd()  + ' or ' + __dirname);
      throw e;
    }
  }
  return result;
}

// parse --highlight-<extension>
var nodeResolve = require('resolve'),
    hl = {};

Object.keys(argv).forEach(function(name) {
  var matched = (typeof name === 'string' ? name.match(/highlight\-(.*)/) : false);
  if(name == 'highlight') {
    argv[name] = findModule(argv[name]);
    hl['default'] = require(argv[name]);
  } else if(matched) {
    var ext = matched[1];
    argv[name] = findModule(argv[name]);
    hl[ext] = require(argv[name]);
  }
});

console.log('Layout: ' + argv.layout);
console.log('Template file: ' + argv.template);
console.log('Input: ' + argv.input);
console.log('Output: ' + path.relative(process.cwd(), argv.output));

if(Object.keys(hl).length > 0) {
  console.log('Highlighters:');
  Object.keys(hl).forEach(function(ext) {
    console.log('\t' + ext, (ext === 'default' ? argv['highlight'] : argv['highlight-' + ext]));
  });
}

var list = new List(),
    eachFn;

argv['highlight'] = hl;

list.add(argv.input);

// console.log(argv, list.files.map(function(i){ return i.name; }));

runner(list, argv);
*/
