#!/usr/bin/env node
var fs = require('fs'),
    path = require('path'),
    marked = require('marked'),
    Gen = require('../lib/generate.js');

var args = require('argsparser').parse(),
    cwd = process.cwd();

if(args['--layouts']) {
  // show layouts
  console.log('Available layouts:\n'+
      fs.readdirSync(__dirname+'/../layouts/')
        .sort(function(a, b) { return a.localeCompare(b); })
        .map(function(name) { return '\t' + name})
        .join('\n')
    );
  process.exit();
}

// Load the layout
var layoutDir = __dirname + '/../layouts/',
    layout = args['--layout'] || 'jasonm23-markdown',
    input = path.normalize(args['--input'] || './input/'),
    output = path.normalize(args['--output'] || './output/'),
    template = path.normalize(path.resolve(cwd, layout));

// template is one of:
if(fs.existsSync(template)) {
  // 1) the supplied argument (normalized)
} else if(fs.existsSync(layoutDir+layout+'/page.html')) {
  // 2) a preset layout from the layout dir
  template = path.normalize(layoutDir+layout+'/page.html');
} else {
  // 3) the default layout
  template = path.normalize(layoutDir+'plain/page.html');
}

if(!fs.existsSync(input)) {
  console.log(input+' does not exist');
  process.exit();
}

console.log('Layout: ' + layout);
console.log('Template file: ' + template);
console.log('Input: ' + input);
console.log('Output: ' + path.relative(cwd, output));

// read in the template
var templateContent = fs.readFileSync(template).toString();

function replace(items, str) {
  var result = str;
  Object.keys(items).forEach(function(key) {
    result = result.replace(new RegExp('{{'+key+'}}', 'g'), items[key]);
  });
  return result;
}

// run the generator for each directory
var gen = new Gen({
    output: output,
    layout: path.dirname(template) + path.sep
  })
  // Recurse through ./input/**/*
  .paths(input)
  // default metadata
  .defaultMeta({
    title: 'example'
  })
  .copyAssets();
//  .sort()

if(args['--each'] && fs.existsSync(args['--each'])) {
  var eachFn = require(args['--each']);
  gen.each = eachFn;
}

gen.each(function(sourceFile, targetFile, content, meta) {
    var title = '';
    /*
    var title = config.titles[path.basename(current.filename, '.md') ];
    content = content.replace(/%chapter_number%/g, current.index);
    */
    console.log(path.relative(cwd, sourceFile), '->', path.relative(cwd, targetFile));

    meta.content = content;

    fs.writeFileSync(targetFile, replace(meta, templateContent) );
  }, marked);
